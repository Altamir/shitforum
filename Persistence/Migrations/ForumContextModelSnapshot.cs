// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Persistence;
using System;

namespace Persistence.Migrations
{
    [DbContext(typeof(ForumContext))]
    partial class ForumContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("Domain.AnalyticsReport", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<string>("ThumbPrint")
                        .IsRequired();

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("AnalyticsReports");
                });

            modelBuilder.Entity("Domain.BannedImage", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Hash")
                        .IsRequired();

                    b.Property<string>("Reason")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("BannedImages");
                });

            modelBuilder.Entity("Domain.BannedIp", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("Expiry");

                    b.Property<string>("IpHash")
                        .IsRequired();

                    b.Property<string>("Reason")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("BannedIps");
                });

            modelBuilder.Entity("Domain.Board", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("BoardKey")
                        .IsRequired();

                    b.Property<string>("BoardName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BoardKey")
                        .IsUnique();

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Domain.File", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<byte[]>("Data")
                        .IsRequired();

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<string>("MimeType")
                        .IsRequired();

                    b.Property<byte[]>("ThumbNailJpeg")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Domain.Post", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<string>("IpAddress")
                        .IsRequired();

                    b.Property<bool>("IsSage");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("ThreadId");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Domain.Thread", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("BoardId");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Threads");
                });

            modelBuilder.Entity("Domain.File", b =>
                {
                    b.HasOne("Domain.Post", "Post")
                        .WithOne("File")
                        .HasForeignKey("Domain.File", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Post", b =>
                {
                    b.HasOne("Domain.Thread")
                        .WithMany("Posts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Thread", b =>
                {
                    b.HasOne("Domain.Board")
                        .WithMany("Threads")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
